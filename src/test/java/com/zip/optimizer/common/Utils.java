package com.zip.optimizer.common;

import com.zip.optimizer.model.ZipcodeRange;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import static org.junit.Assert.assertEquals;

public class Utils {

    static final int MIN = 10000;
    static final int MAX = 99999;

    /***
     * Checks the size of actual and expected zip code ranges along with the contents.
     * @param expectedRanges
     * @param optimizedRanges
     */
    public static void checkExpectedResult (List<ZipcodeRange> expectedRanges, List<ZipcodeRange> optimizedRanges) {
        assertEquals("Zip Code range count mismatch", expectedRanges.size(), optimizedRanges.size());
        int i = 0;
        for (ZipcodeRange zpRange : optimizedRanges) {
            assertEquals(expectedRanges.get(i).getRangeFrom(), zpRange.getRangeFrom());
            assertEquals(expectedRanges.get(i++).getRangeTo(), zpRange.getRangeTo());
        }
    }

    /***
     * Builds an input string of zip code ranges. Also supplies the value of erronous data that is expected to raise exception
     * @param invalidData - incorrect data causing exception
     * @param zips  - zip code ranges to input
     * @return
     */
    public static String buildTestDataString(String invalidData, String ... zips) {
        StringBuffer data = new StringBuffer();
        for (int i = 0; i < zips.length; i++) {
            if(i % 2 == 0) {
                data.append("[" + zips[i] + ",");
            } else {
                data.append(zips[i] + "] ");
            }
        }
        if(invalidData != null) {
            data.append("|" + invalidData);
        }
        return data.toString();
    }

    /***
     * Builds a list of ZipcodeRange objects from the given string variable arguments
     * @param zips - variable number of string arguments representing zip codes
     * @return - list of ZipcodeRange objects
     */
    public static List<ZipcodeRange> getExpectedResult(String ... zips) {
        List<ZipcodeRange> expectedResult = new LinkedList<ZipcodeRange>();
        if(zips.length > 1) {
            expectedResult.add(new ZipcodeRange(Integer.parseInt(zips[0]), Integer.parseInt(zips[1])));
        }
        if(zips.length > 3) {
            expectedResult.add(new ZipcodeRange(Integer.parseInt(zips[2]), Integer.parseInt(zips[3])));
        }
        if(zips.length > 5) {
            expectedResult.add(new ZipcodeRange(Integer.parseInt(zips[4]), Integer.parseInt(zips[5])));
        }
        if(zips.length > 7) {
            expectedResult.add(new ZipcodeRange(Integer.parseInt(zips[6]), Integer.parseInt(zips[7])));
        }
        if(zips.length > 9) {
            expectedResult.add(new ZipcodeRange(Integer.parseInt(zips[8]), Integer.parseInt(zips[9])));
        }
        return expectedResult;
    }

    /***
     * Gets a string representing input zip code ranges. The zip codes are randomly generated as 5 digit
     * numbers between 10000 - 99999. Number of ranges to create depends upon the input argument.
     * If 0, then a random number of ranges are generated.
     * @param dataSetCount - number of input ranges to be generated
     * @return - String representing zip code ranges
     */
    public static String getRandomZipcodes(int dataSetCount) {
        int rangeCount = dataSetCount == 0 ? (new Random().ints(2, 10)).findFirst().getAsInt() : dataSetCount;
        StringBuffer dataSet = new StringBuffer();

        for (int rc = 0; rc < rangeCount; rc++) {
            int lBound = getRandomNumber(0);
            int uBound = getRandomNumber(lBound);
            dataSet.append("[" + lBound + "," + uBound + "] ");
        }
        return dataSet.toString();
    }

    /***
     * Returns a random mumber between lowerbound (or 10000 if lowerbound is 0) and 99999
     * @param lowerBound - lower limit for random number generater
     * @return - Randomly generated 5 digit number
     */
    public static int getRandomNumber(int lowerBound) {
        Random rnd = new Random();
        int min = (lowerBound > MIN) ? lowerBound : MIN;
        return  rnd.ints(min, (MAX + 1)).findFirst().getAsInt();
    }

    /***
     * Prints zip code range strings generated by various steps during a test
     * @param testTitle - Test header (only for the start of the test)
     * @param stepTitle - title indicating the step type
     * @param ranges    - zip code ranges to print
     * @param end       - Ends the test if true
     */
    public static void prettyPrintZipcodeRanges(String testTitle, String stepTitle, List<ZipcodeRange> ranges, boolean end) {
        if(testTitle != null) {
            System.out.println("\n--------------------------------------------------------------------------");
            System.out.println("  " + testTitle);
            System.out.println("--------------------------------------------------------------------------");
        }
        StringBuffer sb = new StringBuffer();
        if(stepTitle.length() > 0) {
            sb.append(stepTitle + " --> ");
            for(ZipcodeRange range: ranges) {
                sb.append("[" + range.getRangeFrom() + "," + range.getRangeTo() + "] ");
            }
            System.out.println(sb.toString());
        }
        if(end) {
            System.out.println("--------------------------------------------------------------------------");
        }
    }
}
